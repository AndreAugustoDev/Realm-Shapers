plugins {
    alias(libs.plugins.shadow)
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        if (accessWidenerPath.asFile.get().exists()) {
            convertAccessWideners.set(true)
            extraAccessWideners.add(accessWidenerFile.name)
        }

        if (file("src/main/resources/${mod_id}.mixins.json").exists()) {
            mixinConfig("${mod_id}.mixins.json")
        }

        if (getRootProject().file("common/src/main/resources/${mod_id}.common.mixins.json").exists()) {
            mixinConfig("${mod_id}.common.mixins.json")
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom(common)
    runtimeClasspath.extendsFrom(common)
    developmentForge.extendsFrom(common)
}

dependencies {
    forge(libs.forge.loader)
    // Remove the next line if you don't want to depend on the API
    modApi(libs.architectury.forge)

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archivesBaseName + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
